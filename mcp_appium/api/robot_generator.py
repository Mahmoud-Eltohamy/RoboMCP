"""
Robot Framework Generator Module
===============================

This module provides functionality for generating Robot Framework test scripts
from OpenAPI specifications, using the RequestsLibrary for API testing.
"""

import re
import logging
from typing import Dict, List, Any, Optional

from .openapi_parser import OpenAPIParser

logger = logging.getLogger(__name__)


class RobotGenerator:
    """
    Generator for Robot Framework test scripts from OpenAPI specifications.
    
    This class is responsible for:
    1. Converting OpenAPI specifications into Robot Framework test scripts
    2. Generating test cases for each endpoint
    3. Creating reusable keywords for common operations
    4. Supporting RequestsLibrary for API testing
    """
    
    def __init__(self, openapi_parser: Optional[OpenAPIParser] = None):
        """
        Initialize the Robot Framework generator.
        
        Args:
            openapi_parser: An OpenAPIParser instance (optional)
        """
        self.parser = openapi_parser
    
    def set_parser(self, parser: OpenAPIParser) -> None:
        """
        Set the OpenAPI parser.
        
        Args:
            parser: An OpenAPIParser instance
        """
        self.parser = parser
    
    def generate_robot_suite(self, output_file: str) -> bool:
        """
        Generate a complete Robot Framework test suite for the API.
        
        Args:
            output_file: Path to save the generated Robot Framework test suite
            
        Returns:
            bool: True if generation was successful, False otherwise
        """
        if not self.parser:
            logger.error("No OpenAPI parser set. Call set_parser() first.")
            return False
        
        try:
            # Generate the suite
            suite_header = self._generate_suite_header()
            settings_section = self._generate_settings_section()
            variables_section = self._generate_variables_section()
            keywords_section = self._generate_keywords_section()
            test_cases = self._generate_test_cases()
            
            # Combine all sections
            robot_suite = f"{suite_header}\n\n{settings_section}\n\n{variables_section}\n\n{keywords_section}\n\n{test_cases}"
            
            # Write to file
            with open(output_file, 'w') as f:
                f.write(robot_suite)
            
            logger.info(f"Generated Robot Framework test suite: {output_file}")
            return True
            
        except Exception as e:
            logger.error(f"Error generating Robot Framework test suite: {str(e)}")
            return False
    
    def _generate_suite_header(self) -> str:
        """
        Generate the suite header with documentation.
        
        Returns:
            str: The suite header
        """
        if not self.parser:
            return "# No OpenAPI parser set"
        
        api_info = self.parser.info
        
        title = api_info.get('title', 'API Tests')
        version = api_info.get('version', 'Unknown')
        description = api_info.get('description', 'API Tests generated from OpenAPI specification')
        
        # Clean up description for Robot Framework comment
        description = description.replace('\n', '\n# ')
        
        header = f"# {title} v{version}\n"
        header += f"# {description}\n"
        header += f"# Generated by MCP Appium Robot Generator"
        
        return header
    
    def _generate_settings_section(self) -> str:
        """
        Generate the settings section.
        
        Returns:
            str: The settings section
        """
        settings = "*** Settings ***\n"
        settings += "Documentation     API Tests generated from OpenAPI specification\n"
        settings += "Library           RequestsLibrary\n"
        settings += "Library           Collections\n"
        settings += "Library           String\n"
        settings += "Library           OperatingSystem\n"
        
        return settings
    
    def _generate_variables_section(self) -> str:
        """
        Generate the variables section.
        
        Returns:
            str: The variables section
        """
        if not self.parser:
            return "*** Variables ***\n${{BASE_URL}}    http://localhost"
        
        # Get base URL from servers list
        base_url = self.parser.get_base_url() or "http://localhost"
        
        variables = "*** Variables ***\n"
        variables += f"${{BASE_URL}}    {base_url}\n"
        
        return variables
    
    def _generate_keywords_section(self) -> str:
        """
        Generate the keywords section with reusable keywords.
        
        Returns:
            str: The keywords section
        """
        keywords = "*** Keywords ***\n"
        
        # Create Session keyword
        keywords += "Create API Session\n"
        keywords += "    [Arguments]    ${name}=api    ${base_url}=${BASE_URL}    ${headers}=${EMPTY}\n"
        keywords += "    ${auth}=    Create Dictionary\n"
        keywords += "    ${headers_dict}=    Create Dictionary    Content-Type=application/json    Accept=application/json\n"
        keywords += "    Run Keyword If    \"${headers}\" != \"${EMPTY}\"    Set To Dictionary    ${headers_dict}    &{headers}\n"
        keywords += "    Create Session    ${name}    ${base_url}    verify=True    headers=${headers_dict}\n\n"
        
        # Get From API keyword
        keywords += "Get From API\n"
        keywords += "    [Arguments]    ${path}    ${params}=${EMPTY}    ${session_name}=api    ${expected_status}=200\n"
        keywords += "    ${response}=    GET On Session    ${session_name}    ${path}    params=${params}    expected_status=${expected_status}\n"
        keywords += "    [Return]    ${response}\n\n"
        
        # Post To API keyword
        keywords += "Post To API\n"
        keywords += "    [Arguments]    ${path}    ${data}=${EMPTY}    ${session_name}=api    ${expected_status}=200\n"
        keywords += "    ${response}=    POST On Session    ${session_name}    ${path}    json=${data}    expected_status=${expected_status}\n"
        keywords += "    [Return]    ${response}\n\n"
        
        # Put To API keyword
        keywords += "Put To API\n"
        keywords += "    [Arguments]    ${path}    ${data}=${EMPTY}    ${session_name}=api    ${expected_status}=200\n"
        keywords += "    ${response}=    PUT On Session    ${session_name}    ${path}    json=${data}    expected_status=${expected_status}\n"
        keywords += "    [Return]    ${response}\n\n"
        
        # Patch To API keyword
        keywords += "Patch To API\n"
        keywords += "    [Arguments]    ${path}    ${data}=${EMPTY}    ${session_name}=api    ${expected_status}=200\n"
        keywords += "    ${response}=    PATCH On Session    ${session_name}    ${path}    json=${data}    expected_status=${expected_status}\n"
        keywords += "    [Return]    ${response}\n\n"
        
        # Delete From API keyword
        keywords += "Delete From API\n"
        keywords += "    [Arguments]    ${path}    ${session_name}=api    ${expected_status}=200\n"
        keywords += "    ${response}=    DELETE On Session    ${session_name}    ${path}    expected_status=${expected_status}\n"
        keywords += "    [Return]    ${response}\n\n"
        
        # Validate Response keyword
        keywords += "Validate Response\n"
        keywords += "    [Arguments]    ${response}    ${schema_file}=${EMPTY}\n"
        keywords += "    Should Be True    ${response.status_code} < 300\n"
        keywords += "    ${status_code}=    Convert To String    ${response.status_code}\n"
        keywords += "    Should Match Regexp    ${status_code}    ^2\\d{2}$\n"
        keywords += "    Should Not Be Empty    ${response.text}\n"
        keywords += "    # TODO: Add schema validation when schema_file is provided\n\n"
        
        return keywords
    
    def _generate_test_cases(self) -> str:
        """
        Generate test cases for each endpoint.
        
        Returns:
            str: The test cases section
        """
        if not self.parser:
            return "*** Test Cases ***\nDummy Test\n    Log    No API specification loaded\n"
        
        test_cases = f"*** Test Cases ***\n"
        endpoints = self.parser.get_endpoints()
        
        for path, methods in endpoints.items():
            for method, details in methods.items():
                if method not in ['get', 'post', 'put', 'delete', 'patch']:
                    continue
                
                # Get operation details
                operation_id = details.get('operationId', f"{method}_{self._path_to_operation_id(path)}")
                summary = details.get('summary', f"{method.upper()} {path}")
                description = details.get('description', '')
                
                # Generate test case
                test_case_name = f"{operation_id.replace('_', ' ').title()}"
                test_cases += f"{test_case_name}\n"
                
                # Add documentation
                if description:
                    # Clean up description for Robot Framework documentation
                    description = description.replace('\n', '\n    ...    ')
                    test_cases += f"    [Documentation]    {summary}\n"
                    test_cases += f"    ...    {description}\n"
                else:
                    test_cases += f"    [Documentation]    {summary}\n"
                
                # Add tags
                test_cases += f"    [Tags]    {method}    {path.replace('/', '_').strip('_')}\n"
                
                # Set up the session
                test_cases += f"    Create API Session\n"
                
                # Extract path parameters if any
                path_params = self.parser.extract_path_parameters(path)
                parameterized_path = self._parameterize_path(path)
                
                # Set up variables for the request
                for param in path_params:
                    if param == 'username':
                        test_cases += f"    ${{username}}=    Set Variable    testuser    # Example username\n"
                    else:
                        test_cases += f"    ${{id}}=    Set Variable    123    # Example ID\n"
                
                # Set up query parameters if needed
                query_params = self._extract_params(path, method)
                if query_params:
                    test_cases += f"    ${{params}}=    Create Dictionary    {query_params}\n"
                else:
                    test_cases += f"    ${{params}}=    Create Dictionary\n"
                
                # Set up request body if needed
                if method in ['post', 'put', 'patch']:
                    request_body = self._extract_request_body(path, method)
                    if request_body:
                        test_cases += f"    ${{data}}=    {request_body}\n"
                    else:
                        test_cases += f"    ${{data}}=    Create Dictionary\n"
                
                # Make the request
                if method == 'get':
                    test_cases += f"    ${{response}}=    Get From API    {parameterized_path}    params=${{params}}\n"
                elif method == 'post':
                    test_cases += f"    ${{response}}=    Post To API    {parameterized_path}    data=${{data}}\n"
                elif method == 'put':
                    test_cases += f"    ${{response}}=    Put To API    {parameterized_path}    data=${{data}}\n"
                elif method == 'delete':
                    test_cases += f"    ${{response}}=    Delete From API    {parameterized_path}\n"
                elif method == 'patch':
                    test_cases += f"    ${{response}}=    Patch To API    {parameterized_path}    data=${{data}}\n"
                
                # Validate the response
                test_cases += f"    Validate Response    ${{response}}\n"
                
                # Add assertions for the response
                test_cases += f"    ${{json}}=    Set Variable    ${{response.json()}}\n"
                test_cases += f"    Log    ${{json}}\n"
                
                # Add more assertions based on the response schema
                schema_ref = self._get_response_schema_ref(path, method)
                if schema_ref:
                    # TODO: Add schema-specific assertions
                    pass
                
                test_cases += "\n"
        
        return test_cases
    
    def _extract_params(self, path: str, method: str) -> str:
        """
        Extract query parameters for an endpoint.
        
        Args:
            path: The endpoint path
            method: The HTTP method
            
        Returns:
            str: A string representation of the parameters
        """
        if not self.parser:
            return ""
        
        params = []
        method = method.lower()
        
        # Get operation parameters
        operation_params = self.parser.get_operation_parameters(path, method)
        
        # Add path parameters
        path_params = self.parser.get_path_parameters(path)
        operation_params.extend(path_params)
        
        # Filter query parameters
        query_params = [p for p in operation_params if p.get('in') == 'query']
        
        for param in query_params:
            name = param.get('name', '')
            example = param.get('example', 'example_value')
            
            # Use example value if available
            params.append(f"{name}={example}")
        
        return "    ".join(params)
    
    def _extract_request_body(self, path: str, method: str) -> str:
        """
        Extract request body for an endpoint.
        
        Args:
            path: The endpoint path
            method: The HTTP method
            
        Returns:
            str: A string representation of the request body
        """
        if not self.parser:
            return ""
        
        method = method.lower()
        
        # Special handling for pet store API pet creation/update
        if path == '/pet' and method in ['post', 'put']:
            pet_example = {
                "id": 12345,
                "name": "Robot Test Pet",
                "category": {
                    "id": 1,
                    "name": "Dogs"
                },
                "photoUrls": [
                    "http://example.com/dog.jpg"
                ],
                "tags": [
                    {
                        "id": 1,
                        "name": "friendly"
                    }
                ],
                "status": "available"
            }
            return self._dict_to_robot(pet_example)
            
        # Special handling for pet store API adding a pet with form data
        if '/pet/' in path and 'petId' in path and method == 'post':
            form_data = {
                "name": "Updated Pet Name",
                "status": "sold"
            }
            return self._dict_to_robot(form_data)
            
        # Special handling for user endpoints
        if path in ['/user', '/user/createWithArray', '/user/createWithList'] and method == 'post':
            user_example = {
                "id": 10,
                "username": "testuser",
                "firstName": "Test",
                "lastName": "User",
                "email": "test@example.com",
                "password": "password123",
                "phone": "1234567890",
                "userStatus": 1
            }
            
            # For arrays, wrap in a list
            if path in ['/user/createWithArray', '/user/createWithList']:
                return self._list_to_robot([user_example])
            else:
                return self._dict_to_robot(user_example)
                
        # Special handling for user update
        if '/user/{username}' in path and method == 'put':
            user_example = {
                "id": 10,
                "username": "updateduser",
                "firstName": "Updated",
                "lastName": "User",
                "email": "updated@example.com",
                "password": "newpassword123",
                "phone": "9876543210",
                "userStatus": 1
            }
            return self._dict_to_robot(user_example)
            
        # Get request body schema
        example = self.parser.extract_example_request(path, method)
        
        if example:
            # Convert Python dict to Robot Framework dictionary creation
            return self._dict_to_robot(example)
        
        return ""
    
    def _dict_to_robot(self, data: Dict[str, Any], indent: int = 0) -> str:
        """
        Convert a Python dictionary to Robot Framework dictionary creation.
        
        Args:
            data: The Python dictionary
            indent: The indentation level
            
        Returns:
            str: A string representation of the dictionary for Robot Framework
        """
        if not data:
            return "Create Dictionary"
        
        items = []
        
        for key, value in data.items():
            if isinstance(value, dict):
                # Recursively convert nested dictionaries
                nested_dict = self._dict_to_robot(value, indent + 1)
                items.append(f"{key}=${{{nested_dict}}}")
            elif isinstance(value, list):
                # Convert lists
                list_value = self._list_to_robot(value, indent + 1)
                items.append(f"{key}=${{{list_value}}}")
            elif isinstance(value, str):
                # Escape special characters in strings
                items.append(f"{key}={value}")
            else:
                # Handle other types
                items.append(f"{key}={value}")
        
        return f"Create Dictionary    {'    '.join(items)}"
    
    def _list_to_robot(self, data: List[Any], indent: int = 0) -> str:
        """
        Convert a Python list to Robot Framework list creation.
        
        Args:
            data: The Python list
            indent: The indentation level
            
        Returns:
            str: A string representation of the list for Robot Framework
        """
        if not data:
            return "Create List"
        
        items = []
        
        for value in data:
            if isinstance(value, dict):
                # Recursively convert nested dictionaries
                nested_dict = self._dict_to_robot(value, indent + 1)
                items.append(f"${{{nested_dict}}}")
            elif isinstance(value, list):
                # Convert nested lists
                nested_list = self._list_to_robot(value, indent + 1)
                items.append(f"${{{nested_list}}}")
            elif isinstance(value, str):
                # Escape special characters in strings
                items.append(f"{value}")
            else:
                # Handle other types
                items.append(f"{value}")
        
        return f"Create List    {'    '.join(items)}"
    
    def _parameterize_path(self, path: str) -> str:
        """
        Convert path parameters to Robot Framework format.
        
        Args:
            path: The endpoint path
            
        Returns:
            str: The path with parameters in Robot Framework format
        """
        # Check for specific pet store paths and provide realistic values
        if path == '/pet/{petId}':
            return '/pet/${id}'
        elif path == '/pet/{petId}/uploadImage':
            return '/pet/${id}/uploadImage'
        elif path == '/store/order/{orderId}':
            return '/store/order/${id}'
        elif path == '/user/{username}':
            return '/user/${username}'
        
        # Handle common ID patterns for any path
        pattern = r'{([^}]+)}'
        matches = re.findall(pattern, path)
        
        result = path
        for param in matches:
            # Common ID parameters that should use ${id}
            if param.lower().endswith('id') or param.lower() == 'id':
                result = result.replace(f"{{{param}}}", "${id}")
            # Username parameters
            elif param.lower() == 'username':
                result = result.replace(f"{{{param}}}", "${username}")
            # For other parameters, use the original parameter name
            else:
                result = result.replace(f"{{{param}}}", f"${{{param}}}")
        
        return result
    
    def _path_to_operation_id(self, path: str) -> str:
        """
        Convert a path to an operation ID-like string.
        
        Args:
            path: The endpoint path
            
        Returns:
            str: The operation ID
        """
        # Remove leading and trailing slashes
        path = path.strip('/')
        
        # Replace slashes with underscores
        path = path.replace('/', '_')
        
        # Replace path parameters with generic names
        path = re.sub(r'{[^}]+}', 'id', path)
        
        return path
    
    def _get_response_schema_ref(self, path: str, method: str) -> str:
        """
        Get the schema reference for the successful response.
        
        Args:
            path: The endpoint path
            method: The HTTP method
            
        Returns:
            str: The schema reference, or an empty string if not found
        """
        if not self.parser:
            return ""
        
        # Get response schema for 200 status code
        schema = self.parser.get_response_schema(path, method, '200')
        
        if schema and '$ref' in schema:
            return schema['$ref']
        
        return ""