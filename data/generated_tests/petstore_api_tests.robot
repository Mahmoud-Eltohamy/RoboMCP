# Swagger Petstore v1.0.7
# This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
# Generated by MCP Appium Robot Generator

*** Settings ***
Documentation     API Tests generated from OpenAPI specification
Library           RequestsLibrary
Library           Collections
Library           String
Library           OperatingSystem


*** Variables ***
${BASE_URL}    https://petstore.swagger.io/v2


*** Keywords ***
Create API Session
    [Arguments]    ${name}=api    ${base_url}=${BASE_URL}    ${headers}=${EMPTY}
    ${auth}=    Create Dictionary
    ${headers_dict}=    Create Dictionary    Content-Type=application/json    Accept=application/json
    Run Keyword If    "${headers}" != "${EMPTY}"    Set To Dictionary    ${headers_dict}    &{headers}
    Create Session    ${name}    ${base_url}    verify=True    headers=${headers_dict}

Get From API
    [Arguments]    ${path}    ${params}=${EMPTY}    ${session_name}=api    ${expected_status}=200
    ${response}=    GET On Session    ${session_name}    ${path}    params=${params}    expected_status=${expected_status}
    [Return]    ${response}

Post To API
    [Arguments]    ${path}    ${data}=${EMPTY}    ${session_name}=api    ${expected_status}=200
    ${response}=    POST On Session    ${session_name}    ${path}    json=${data}    expected_status=${expected_status}
    [Return]    ${response}

Put To API
    [Arguments]    ${path}    ${data}=${EMPTY}    ${session_name}=api    ${expected_status}=200
    ${response}=    PUT On Session    ${session_name}    ${path}    json=${data}    expected_status=${expected_status}
    [Return]    ${response}

Patch To API
    [Arguments]    ${path}    ${data}=${EMPTY}    ${session_name}=api    ${expected_status}=200
    ${response}=    PATCH On Session    ${session_name}    ${path}    json=${data}    expected_status=${expected_status}
    [Return]    ${response}

Delete From API
    [Arguments]    ${path}    ${session_name}=api    ${expected_status}=200
    ${response}=    DELETE On Session    ${session_name}    ${path}    expected_status=${expected_status}
    [Return]    ${response}

Validate Response
    [Arguments]    ${response}    ${schema_file}=${EMPTY}
    Should Be True    ${response.status_code} < 300
    ${status_code}=    Convert To String    ${response.status_code}
    Should Match Regexp    ${status_code}    ^2\d{2}$
    Should Not Be Empty    ${response.text}
    # TODO: Add schema validation when schema_file is provided



*** Test Cases ***
Uploadfile
    [Documentation]    uploads an image
    [Tags]    post    pet_{petId}_uploadImage
    Create API Session
    ${id}=    Set Variable    123    # Example ID
    ${params}=    Create Dictionary
    ${data}=    Create Dictionary    name=Updated Pet Name    status=sold
    ${response}=    Post To API    /pet/${id}/uploadImage    data=${data}
    Validate Response    ${response}
    ${json}=    Set Variable    ${response.json()}
    Log    ${json}

Addpet
    [Documentation]    Add a new pet to the store
    [Tags]    post    pet
    Create API Session
    ${params}=    Create Dictionary
    ${data}=    Create Dictionary    id=12345    name=Robot Test Pet    category=${Create Dictionary    id=1    name=Dogs}    photoUrls=${Create List    http://example.com/dog.jpg}    tags=${Create List    ${Create Dictionary    id=1    name=friendly}}    status=available
    ${response}=    Post To API    /pet    data=${data}
    Validate Response    ${response}
    ${json}=    Set Variable    ${response.json()}
    Log    ${json}

Updatepet
    [Documentation]    Update an existing pet
    [Tags]    put    pet
    Create API Session
    ${params}=    Create Dictionary
    ${data}=    Create Dictionary    id=12345    name=Robot Test Pet    category=${Create Dictionary    id=1    name=Dogs}    photoUrls=${Create List    http://example.com/dog.jpg}    tags=${Create List    ${Create Dictionary    id=1    name=friendly}}    status=available
    ${response}=    Put To API    /pet    data=${data}
    Validate Response    ${response}
    ${json}=    Set Variable    ${response.json()}
    Log    ${json}

Findpetsbystatus
    [Documentation]    Finds Pets by status
    ...    Multiple status values can be provided with comma separated strings
    [Tags]    get    pet_findByStatus
    Create API Session
    ${params}=    Create Dictionary    status=example_value
    ${response}=    Get From API    /pet/findByStatus    params=${params}
    Validate Response    ${response}
    ${json}=    Set Variable    ${response.json()}
    Log    ${json}

Findpetsbytags
    [Documentation]    Finds Pets by tags
    ...    Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
    [Tags]    get    pet_findByTags
    Create API Session
    ${params}=    Create Dictionary    tags=example_value
    ${response}=    Get From API    /pet/findByTags    params=${params}
    Validate Response    ${response}
    ${json}=    Set Variable    ${response.json()}
    Log    ${json}

Getpetbyid
    [Documentation]    Find pet by ID
    ...    Returns a single pet
    [Tags]    get    pet_{petId}
    Create API Session
    ${id}=    Set Variable    123    # Example ID
    ${params}=    Create Dictionary
    ${response}=    Get From API    /pet/${id}    params=${params}
    Validate Response    ${response}
    ${json}=    Set Variable    ${response.json()}
    Log    ${json}

Updatepetwithform
    [Documentation]    Updates a pet in the store with form data
    [Tags]    post    pet_{petId}
    Create API Session
    ${id}=    Set Variable    123    # Example ID
    ${params}=    Create Dictionary
    ${data}=    Create Dictionary    name=Updated Pet Name    status=sold
    ${response}=    Post To API    /pet/${id}    data=${data}
    Validate Response    ${response}
    ${json}=    Set Variable    ${response.json()}
    Log    ${json}

Deletepet
    [Documentation]    Deletes a pet
    [Tags]    delete    pet_{petId}
    Create API Session
    ${id}=    Set Variable    123    # Example ID
    ${params}=    Create Dictionary
    ${response}=    Delete From API    /pet/${id}
    Validate Response    ${response}
    ${json}=    Set Variable    ${response.json()}
    Log    ${json}

Getinventory
    [Documentation]    Returns pet inventories by status
    ...    Returns a map of status codes to quantities
    [Tags]    get    store_inventory
    Create API Session
    ${params}=    Create Dictionary
    ${response}=    Get From API    /store/inventory    params=${params}
    Validate Response    ${response}
    ${json}=    Set Variable    ${response.json()}
    Log    ${json}

Placeorder
    [Documentation]    Place an order for a pet
    [Tags]    post    store_order
    Create API Session
    ${params}=    Create Dictionary
    ${data}=    Create Dictionary
    ${response}=    Post To API    /store/order    data=${data}
    Validate Response    ${response}
    ${json}=    Set Variable    ${response.json()}
    Log    ${json}

Getorderbyid
    [Documentation]    Find purchase order by ID
    ...    For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
    [Tags]    get    store_order_{orderId}
    Create API Session
    ${id}=    Set Variable    123    # Example ID
    ${params}=    Create Dictionary
    ${response}=    Get From API    /store/order/${id}    params=${params}
    Validate Response    ${response}
    ${json}=    Set Variable    ${response.json()}
    Log    ${json}

Deleteorder
    [Documentation]    Delete purchase order by ID
    ...    For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
    [Tags]    delete    store_order_{orderId}
    Create API Session
    ${id}=    Set Variable    123    # Example ID
    ${params}=    Create Dictionary
    ${response}=    Delete From API    /store/order/${id}
    Validate Response    ${response}
    ${json}=    Set Variable    ${response.json()}
    Log    ${json}

Createuserswithlistinput
    [Documentation]    Creates list of users with given input array
    [Tags]    post    user_createWithList
    Create API Session
    ${params}=    Create Dictionary
    ${data}=    Create List    ${Create Dictionary    id=10    username=testuser    firstName=Test    lastName=User    email=test@example.com    password=password123    phone=1234567890    userStatus=1}
    ${response}=    Post To API    /user/createWithList    data=${data}
    Validate Response    ${response}
    ${json}=    Set Variable    ${response.json()}
    Log    ${json}

Getuserbyname
    [Documentation]    Get user by user name
    [Tags]    get    user_{username}
    Create API Session
    ${username}=    Set Variable    testuser    # Example username
    ${params}=    Create Dictionary
    ${response}=    Get From API    /user/${username}    params=${params}
    Validate Response    ${response}
    ${json}=    Set Variable    ${response.json()}
    Log    ${json}

Updateuser
    [Documentation]    Updated user
    ...    This can only be done by the logged in user.
    [Tags]    put    user_{username}
    Create API Session
    ${username}=    Set Variable    testuser    # Example username
    ${params}=    Create Dictionary
    ${data}=    Create Dictionary    id=10    username=updateduser    firstName=Updated    lastName=User    email=updated@example.com    password=newpassword123    phone=9876543210    userStatus=1
    ${response}=    Put To API    /user/${username}    data=${data}
    Validate Response    ${response}
    ${json}=    Set Variable    ${response.json()}
    Log    ${json}

Deleteuser
    [Documentation]    Delete user
    ...    This can only be done by the logged in user.
    [Tags]    delete    user_{username}
    Create API Session
    ${username}=    Set Variable    testuser    # Example username
    ${params}=    Create Dictionary
    ${response}=    Delete From API    /user/${username}
    Validate Response    ${response}
    ${json}=    Set Variable    ${response.json()}
    Log    ${json}

Loginuser
    [Documentation]    Logs user into the system
    [Tags]    get    user_login
    Create API Session
    ${params}=    Create Dictionary    username=example_value    password=example_value
    ${response}=    Get From API    /user/login    params=${params}
    Validate Response    ${response}
    ${json}=    Set Variable    ${response.json()}
    Log    ${json}

Logoutuser
    [Documentation]    Logs out current logged in user session
    [Tags]    get    user_logout
    Create API Session
    ${params}=    Create Dictionary
    ${response}=    Get From API    /user/logout    params=${params}
    Validate Response    ${response}
    ${json}=    Set Variable    ${response.json()}
    Log    ${json}

Createuserswitharrayinput
    [Documentation]    Creates list of users with given input array
    [Tags]    post    user_createWithArray
    Create API Session
    ${params}=    Create Dictionary
    ${data}=    Create List    ${Create Dictionary    id=10    username=testuser    firstName=Test    lastName=User    email=test@example.com    password=password123    phone=1234567890    userStatus=1}
    ${response}=    Post To API    /user/createWithArray    data=${data}
    Validate Response    ${response}
    ${json}=    Set Variable    ${response.json()}
    Log    ${json}

Createuser
    [Documentation]    Create user
    ...    This can only be done by the logged in user.
    [Tags]    post    user
    Create API Session
    ${params}=    Create Dictionary
    ${data}=    Create Dictionary    id=10    username=testuser    firstName=Test    lastName=User    email=test@example.com    password=password123    phone=1234567890    userStatus=1
    ${response}=    Post To API    /user    data=${data}
    Validate Response    ${response}
    ${json}=    Set Variable    ${response.json()}
    Log    ${json}

