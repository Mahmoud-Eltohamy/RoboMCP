# Test API v1.0.0
# A simple API for testing YAML support
# Generated by MCP Appium Robot Generator

*** Settings ***
Documentation     API Tests generated from OpenAPI specification
Library           RequestsLibrary
Library           Collections
Library           String
Library           OperatingSystem


*** Variables ***
${BASE_URL}    https://api.example.com/v1


*** Keywords ***
Create API Session
    [Arguments]    ${name}=api    ${base_url}=${BASE_URL}    ${headers}=${EMPTY}
    ${auth}=    Create Dictionary
    ${headers_dict}=    Create Dictionary    Content-Type=application/json    Accept=application/json
    Run Keyword If    "${headers}" != "${EMPTY}"    Set To Dictionary    ${headers_dict}    &{headers}
    Create Session    ${name}    ${base_url}    verify=True    headers=${headers_dict}

Get From API
    [Arguments]    ${path}    ${params}=${EMPTY}    ${session_name}=api    ${expected_status}=200
    ${response}=    GET On Session    ${session_name}    ${path}    params=${params}    expected_status=${expected_status}
    [Return]    ${response}

Post To API
    [Arguments]    ${path}    ${data}=${EMPTY}    ${session_name}=api    ${expected_status}=200
    ${response}=    POST On Session    ${session_name}    ${path}    json=${data}    expected_status=${expected_status}
    [Return]    ${response}

Put To API
    [Arguments]    ${path}    ${data}=${EMPTY}    ${session_name}=api    ${expected_status}=200
    ${response}=    PUT On Session    ${session_name}    ${path}    json=${data}    expected_status=${expected_status}
    [Return]    ${response}

Patch To API
    [Arguments]    ${path}    ${data}=${EMPTY}    ${session_name}=api    ${expected_status}=200
    ${response}=    PATCH On Session    ${session_name}    ${path}    json=${data}    expected_status=${expected_status}
    [Return]    ${response}

Delete From API
    [Arguments]    ${path}    ${session_name}=api    ${expected_status}=200
    ${response}=    DELETE On Session    ${session_name}    ${path}    expected_status=${expected_status}
    [Return]    ${response}

Validate Response
    [Arguments]    ${response}    ${schema_file}=${EMPTY}
    Should Be True    ${response.status_code} < 300
    ${status_code}=    Convert To String    ${response.status_code}
    Should Match Regexp    ${status_code}    ^2\d{2}$
    Should Not Be Empty    ${response.text}
    # TODO: Add schema validation when schema_file is provided



*** Test Cases ***
Getusers
    [Documentation]    Get all users
    [Tags]    get    users
    Create API Session
    ${params}=    Create Dictionary
    ${response}=    Get From API    /users    params=${params}
    Validate Response    ${response}
    ${json}=    Set Variable    ${response.json()}
    Log    ${json}

Createuser
    [Documentation]    Create a new user
    [Tags]    post    users
    Create API Session
    ${params}=    Create Dictionary
    ${data}=    Create Dictionary    name=example_name    email=example_email
    ${response}=    Post To API    /users    data=${data}
    Validate Response    ${response}
    ${json}=    Set Variable    ${response.json()}
    Log    ${json}

Getuserbyid
    [Documentation]    Get user by ID
    [Tags]    get    users_{userId}
    Create API Session
    ${id}=    Set Variable    123    # Example ID
    ${params}=    Create Dictionary
    ${response}=    Get From API    /users/${id}    params=${params}
    Validate Response    ${response}
    ${json}=    Set Variable    ${response.json()}
    Log    ${json}

